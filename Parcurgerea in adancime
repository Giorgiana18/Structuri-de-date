#include <iostream>
using namespace std;
int a[20][20],sol[20],viz[20];
int n,m,i,j,e1,e2,x,k;
void afisare()
{
    unsigned int x;
    for(x=1;x<=n;x++)
        cout<<sol[x]<<endl;
}
void back(unsigned int nod_curent)
{
   unsigned int x;
   if(k==n)
        afisare();
   else
    for(x=1;x<=n;x++)
     if(!viz[x] && a[x][sol[nod_curent]])
   {
       viz[x]=1;
       k++;
       sol[k]=x;
       back(k);
   }
   /*Dacă nodul x nu a fost vizitat (!viz[x]) și există o muchie între nodurile x și nodul curent (a[x][sol[nod_curent]] este diferit de zero),
   atunci se marchează nodul x ca vizitat (viz[x] = 1), se incrementează k pentru a adăuga un nou nod în soluție,
   se adaugă nodul x în soluție (sol[k] = x), și se apelează recursiv funcția back cu noul k pentru a continua generarea soluțiilor.*/
}
int main()
{
    cout << "Numarul de noduri: ";cin>>n;
    cout<<"Numarul de muchii: ";cin>>m;
    cout<<"Dati graful prin muchii e1 si e2: ";
    for(i=1;i<=n;i++)
    {
        cout<<"muchia:"<<i<<endl;
        cout<<"e1=";cin>>e1;
        cout<<"e2=";cin>>e2;
        a[e1][e2]=a[e2][e1]=1;
    }
    for(i=1;i<=n;i++)
        viz[i]=0;
    cout<<"Nodul de plecare:";cin>>x;
    sol[1]=x;
    viz[x]=1;
    k=1;
    back(1);
    return 0;
}
